#!/usr/bin/env python3
# Copyright Â© 2020 Mark Summerfield. All rights reserved.

import base64
import gzip
import os
import pathlib
import re
import sys


MODULE = 'AppData.py'


def main():
    appdata = get_appdata() # May not return
    target = get_target()
    filenames = get_filenames(appdata)
    write_data(appdata, target, filenames)


def get_appdata():
    if len(sys.argv) == 2:
        if sys.argv[1] in {'-h', '--help'}:
            raise SystemExit(USAGE)
        else:
            appdata = pathlib.Path(sys.argv[1])
    else:
        appdata = pathlib.Path('appdata')
    if not appdata.exists():
        raise SystemExit(USAGE)
    return appdata


def get_target():
    target = pathlib.Path('src')
    if target.exists():
        return target / MODULE
    return pathlib.Path(MODULE)


def get_filenames(appdata):
    for root, _, files in os.walk(appdata):
        for name in files:
            yield pathlib.Path(os.path.join(root, name))


def write_data(appdata, target, filenames):
    d = {}
    for filename in filenames:
        key = str(filename.relative_to(appdata))
        const = re.sub(r'[-.]', '_', str(filename.name).upper())
        with open(filename, 'rb') as file:
            data = base64.b64encode(gzip.compress(file.read()))
            d[key] = (const, data)
    with open(target, 'wt', encoding='utf-8') as file:
        file.write(HEADER)
        for key in sorted(d):
            file.write(f"{d[key][0]} = '{key}'\n")
        file.write(BODY)
        for key, (const, data) in sorted(d.items()):
            file.write(f"_AppData[{d[key][0]}] = {d[key][1]}\n")
        file.write(FOOTER)
    print(f'wrote {target}')


USAGE = '''usage: make_appdata.py [appdata-path]

appdata-path defaults to appdata/

outputs src/AppData.py if src/ exists otherwise ./AppData.py
'''

HEADER = '''#!/usr/bin/env python3
# Autogenerated by make_appdata.py so don't edit.

import base64
import gzip

from PySide2.QtGui import QIcon, QImage, QPixmap

'''

BODY = '''

_AppData = {}
'''

FOOTER = '''

def get_image(name):
    return QImage.fromData(_get_bytes(name))


def get_pixmap(name):
    return QPixmap.fromImage(get_image(name))


def get_icon(name):
    return QIcon(get_pixmap(name))


def _get_bytes(name):
    return gzip.decompress(base64.b64decode(_AppData[name]))
'''


if __name__ == '__main__':
    main()
