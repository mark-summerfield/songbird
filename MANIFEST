src/songbird.pyw
src/MainWindow.py
src/FileActions.py
src/EditActions.py
src/ContentsActions.py
# src/SQLActions.py
src/OptionsActions.py
# src/WindowsActions.py
src/HelpActions.py
src/ContentsView.py
src/PragmaView.py
src/Ui.py
src/TableWidget.py
src/TableModel.py
src/SQLEdit.py
src/SQLSyntaxHighlighter.py
src/Db.py
src/Sql.py
src/RecentFiles.py
src/Config.py
src/Const.py

st.sh

README.md

# TODO
#
# - for pure SQLite dbs remember those opened in the past year (in
#   songbird.sbc), so on quit delete any older than one year:
#   CREATE TABLE files (
#	fid -- PK
#	filename -- full path to SQLite file
#	updated -- text datetime timestamp
#	mdi -- bool FALSE means tabs
#	show_contents -- bool
#	show_pragmas -- bool
#	show_calendar -- bool
#   CREATE TABLE windows (
#	wid -- PK
#	fid -- FK
#	title
#	sql
#	x
#	y
#	width
#	height
#	z -- this is tab pos or z-order depending on mode
#	edit_height -- the splitter gives this much to the editor; rest
#		    -- to the table view (edit_height could be 0)
#
# - QueryWidget
#	copy TableWidget.py to QueryWidget.py
#	put QTableView in a QWidgetStack? with a QPlainTextEdit
#	if query is SELECT then switch to the QTableView and do as now;
#	otherwise switch to the QPlainTextEdit and do:
#	    try:
#		self.db.execute(sql)
#	    ...
#   If this all works, then replace the TableWidget with the QueryWidget
#
# - buttons or menu options for insert/update/delete? or only in form view?
#
# - How to handle form view insert/update/delete/previous/next/save?
#
#
# - create TriggerEditor for adding/editing/deleting triggers
#
# - create IndexEditor for adding/editing/deleting indexes
#
# - complete menus: File (Edit) Contents SQL Options Windows[SDI] Help
# - pure SQL
# - options dialog:
#   default suffix; default database (SQLite | Songbird);
#   [X] Show Row Numbers (in list views)
# - custom types using songbird_types (tablename, fieldname, type)
# - custom forms
# - See DB Browser for SQLite's Tools menu (Optimize, Check, etc.)
# - See DB Browser for SQLite's File menu & Edit→Preferences dialog
# - provide an editor/dialog/? for creating transforms e.g., applying
#   some math function to every column in a table (or selection of a
#   table), etc.
# - Songbird:
#   . File→New Songbird
#   . songbird_types (tablename, fieldname, tid, minimum, maximum)
#     tid "type ID", e.g., 1 Boolean, 2 Integer, ...
#   . songbird_windows (tablename, x, y, width, height, z, tab_pos,
#     sql_select, listview) -- sql is the SELECT; listview is Boolean
#     list or form view
#   . songbird_config (key, value) e.g., show_contents, show_pragmas,
#     use tabs (vs MDI) etc.
# - ultimately aim to be able to replace Biller and Notebox and Film/TV
#   spreadsheet with custom Songbird databases

# Toggle Form View toggles between a form for adding/editing and a list
# for viewing (and possibly in-place adding/editing).
# Toggle Tabs toggles between MDI and tabs view.

# SQL->Create Query leads to a dialog for creating:
# - a raw SQL query
# - SELECT|INSERT|UPDATE|DELETE using using a wizard
# - applying some kind of transform using a wizard
# The result is added to the contents view and added as an MDI window

# &SQL                
#   Create &Query...
#   ---------         
#   Create &Table...  
#   Create &View...  
#   &Create Trigger...
#   ---------        
#   &Alter Table...  
#   Alter Vie&w...   
#   A&lter Trigger...

# &Window # SDI! (max of 9)
#   &1 <sdi name>        
#      :	         
#   &9 <sdi name>        

# Initially insert/update can only be done in form view and delete in
# form or list view. Ideally allow in-place insert/update in list view
# if/when possible.

# Ideas
# - Implement a plugin system? (Using a PyPI lib'y?), e.g., to support:
#   . Excel import/export using try .. except ImportError so it is
#     available but not required
#     (& similarly for dBase II, Access, etc., if suitable modules are
#     available)
#   . Songbird (& SQLite?) merge
#   ...
# - implement Undo/Redo by using a temporary memory database; see
#   https://www.sqlite.org/undoredo.html

# vim: syn=yaml
