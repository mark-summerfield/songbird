src/songbird.pyw

src/MainWindow/__init__.py
src/MainWindow/Window.py
src/MainWindow/FileActions.py
src/MainWindow/EditActions.py
# src/MainWindow/RecordActions.py
# src/MainWindow/DatabaseActions.py
src/MainWindow/ViewActions.py
src/MainWindow/OptionsActions.py
# src/MainWindow/WindowsActions.py
src/MainWindow/HelpActions.py

src/ItemsTreeView.py
src/PragmaView.py
src/Ui.py
src/TableWidget.py
src/TableModel.py
src/SQLEdit.py
src/SQLSyntaxHighlighter.py
src/Db.py
src/Sql.py
src/RecentFiles.py
src/Const.py # VERSION
src/Config.py
src/ConfigConst.py

st.sh

README.md

make_appdata.py

# TODO
# - View → &Goto Item Tree
#
# - for pure SQLite dbs remember those opened in the past year (in
#   songbird.sbc), so on quit delete any older than one year:
#   CREATE TABLE files (
#	fid -- PK
#	filename -- full path to SQLite file
#	updated -- text datetime timestamp
#	mdi -- bool FALSE means tabs
#	show_items_tree -- bool
#	show_pragmas -- bool
#	show_calendar -- bool
#   CREATE TABLE windows (
#	wid -- PK
#	fid -- FK
#	title
#	sql
#	x -- this and below are all nullable (z doesn't appear to be avail)
#	y
#	width
#	height
#	tab_pos
#	editor_height -- the splitter gives this much to the editor; rest
#		      -- to the table view (edit_height could be 0)
#   CREATE TRIGGER to cascade delete windows if a files record is deleted
#
# - QueryWidget
#	copy TableWidget.py to QueryWidget.py
#	put QTableView in a QWidgetStack? with a QPlainTextEdit
#	if query is SELECT then switch to the QTableView and do as now;
#	otherwise switch to the QPlainTextEdit and do:
#	    try:
#		self.db.execute(sql)
#	    ...
#   If this all works, then replace the TableWidget with the QueryWidget
#
# - buttons or menu options for insert/update/delete? or only in form view?
#
# - How to handle form view insert/update/delete/previous/next/save?
#
#
# - create TriggerEditor for adding/editing/deleting triggers
#
# - create IndexEditor for adding/editing/deleting indexes
#
# - complete menus
#
# - pure SQL
#
# - options dialog:
#   default suffix; default database (SQLite | Songbird);
#   [X] Show Row Numbers (in list views)
#
# - custom types using songbird_types (tablename, fieldname, type)
#
# - custom forms
#
# - See DB Browser for SQLite's Tools menu (Optimize, Check, etc.)
#
# - See DB Browser for SQLite's File menu & Edit→Preferences dialog
#
# - provide an editor/dialog/? for creating transforms e.g., applying
#   some math function to every column in a table (or selection of a
#   table), etc.
#
# - Songbird:
#   . File→New Songbird
#   . songbird_types (tablename, fieldname, tid, minimum, maximum)
#     tid "type ID", e.g., 1 Boolean, 2 Integer, ...
#   . songbird_windows (tablename, x, y, width, height, z, tab_pos,
#     sql_select, listview) -- sql is the SELECT; listview is Boolean
#     list or form view
#   . songbird_config (key, value) e.g., show_contents, show_pragmas,
#     use tabs (vs MDI) etc.
# - ultimately aim to be able to replace Biller and Notebox and Film/TV
#   spreadsheet with custom Songbird databases
#
# Database->New Query leads to a dialog for creating:
# - a raw SQL query
# - SELECT|INSERT|UPDATE|DELETE using using a wizard
# - applying some kind of transform using a wizard
# The result is added to the contents view and added as an MDI window
#
# &Record         &Database           &Window # SDI! (max of 9)
#     &Next         New &Query...       &1 <sdi name>        
#     &Previous     ---------              :	         
#     ---------     Create &Table...    &9 <sdi name>        
#     &Insert...    Create &View...  
#     &Update...    &Create Trigger...
#     &Delete...    ---------        
#                   &Alter Table...  
#                   Alter Vie&w...   
#                   A&lter Trigger...
#
# Ideas
# - Show/Hide row numbers per MDI window?
# - Completion in SQLEdit?
# - A plugin system? (Using a PyPI lib'y?), e.g., to support:
#   . Excel import/export using try .. except ImportError so it is
#     available but not required
#     (& similarly for dBase II, Access, etc., if suitable modules are
#     available)
#   . Songbird (& SQLite?) merge
#   ...
# - implement Undo/Redo by using a temporary memory database; see
#   https://www.sqlite.org/undoredo.html

# vim: syn=yaml
