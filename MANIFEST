src/songbird.pyw
src/MainWindow.py # TODO
src/FileActions.py # TODO
src/EditActions.py # TODO
src/ContentsActions.py # TODO
# src/SQLActions.py # TODO
src/OptionsActions.py # TODO
# src/WindowsActions.py # TODO
src/HelpActions.py # TODO
src/ContentsView.py
src/PragmaView.py # TODO
src/QueryWidget.py # TODO
src/Ui.py
src/Model.py # TODO
src/RecentFiles.py
src/Sql.py
src/Config.py
src/Const.py

st.sh

README.md

# - create QueryWidget (to show: ad hoc SELECT, Table, View)
#     -- list view --
#   QPlainTextEdit + QSyntaxHighlighter to show raw SQL
#   -- splitter --
#   QTableView with custom QueryModel (using OFFSET & LIMIT if rows > 1K)
#   -- splitter --
#   QPlainTextEdit for errors & info
#   [Insert][Update][Delete][Save][Revert][Form View]
#      -- form view --
#   QLabel1 editor1
#	:
#   QLabelN editorN
#   [Insert][Update][Delete][Save][Revert][List View][Previous][Next]
#
# - create TriggerEditor for adding/editing/deleting triggers
#
# - create IndexEditor for adding/editing/deleting indexes
#
# - complete menus: File (Edit) Contents SQL Options Windows[SDI] Help
# - pure SQL
# - options dialog:
#   blink; default suffix; default database (SQLite | Songbird)
# - custom types using songbird_types (tablename, fieldname, type)
# - custom forms
# - See DB Browser for SQLite's Tools menu (Optimize, Check, etc.)
# - See DB Browser for SQLite's File menu & Editâ†’Preferences dialog
# - provide an editor/dialog/? for creating transforms e.g., applying
#   some math function to every column in a table (or selection of a
#   table), etc.
# - ultimately aim to be able to replace both Biller and Notebox with
#  custom songbird databases

# Toggle Form View toggles between a form for adding/editing and a list
# for viewing (and possibly in-place adding/editing).
# Toggle Tabs toggles between MDI and tabs view.

# SQL->Create Query leads to a dialog for creating:
# - a raw SQL query
# - SELECT|INSERT|UPDATE|DELETE using using a wizard
# - applying some kind of transform using a wizard
# The result is added to the contents view and added as an MDI window

# &SQL                
#   Create &Query...
#   ---------         
#   Create &Table...  
#   Create &View...  
#   &Create Trigger...
#   ---------        
#   &Alter Table...  
#   Alter Vie&w...   
#   A&lter Trigger...

# &Window # SDI! (max of 9)
#   &1 <sdi name>        
#      :	         
#   &9 <sdi name>        

# Initially insert/update can only be done in form view and delete in
# form or list view. Ideally allow in-place insert/update in list view
# if/when possible.

# vim: syn=yaml
